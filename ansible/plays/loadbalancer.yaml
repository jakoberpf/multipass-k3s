---
## Command
# ansible-playbook -i hosts plays/setup_loadbalancer.yml --private-key=./.ssh/id_rsa_loadbalancer

- name: Setup haproxy as loadbalancer in high aviability with keepalived
  hosts: leaders
  remote_user: ubuntu

  vars:

    - inventory_groupname: "{{ hostvars[inventory_hostname].group_names[0] }}"

  roles:

    - name: high_availability/haproxy
    - name: high_availability/keepalived

  tasks:

    # TODO: intergrate into role
    # haproxy -c -V -f /etc/haproxy/haproxy.cfg
    - name: Create haproxy.cfg
      become: true
      blockinfile:
        path: /etc/haproxy/haproxy.cfg
        block: |
        
            ############## Configure ectd loadbalancer #############
            frontend etcd_frontend
                    mode tcp
                    bind {{ cluster_ip }}:{{ cluster_port_etcd }}
                    option tcplog
                    default_backend etcd_backend

            backend etcd_backend
                    mode tcp
                    option tcp-check
                    balance roundrobin
                    {% for item in groups[inventory_groupname] %}
                    server {{ hostvars[item].ansible_hostname }} {{ hostvars[item]['ansible_' + cluster_interface].ipv4.address }}:2379 check fall 3 rise 2
                    {% endfor %}

            ############## Configure kubernetes loadbalancer #############
            frontend kubernetes_frontend
                    mode tcp
                    bind {{ cluster_ip }}:{{ cluster_port_kubernetes }}

                    # Add headers for SSL offloading
                    # http-request set-header X-Forwarded-Proto https if { ssl_fc }
                    # http-request set-header X-Forwarded-Ssl on if { ssl_fc }

                    option tcplog
                    default_backend kubernetes_backend

            backend kubernetes_backend
                    mode tcp
                    balance roundrobin

                    option tcplog
                    option tcp-check
                    
                    option httpchk GET /healthz
                    http-check expect status 200

                    option ssl-hello-chk

                    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
                    {% for item in groups[inventory_groupname] %}
                    server {{ hostvars[item].ansible_hostname }} {{ hostvars[item]['ansible_' + cluster_interface].ipv4.address }}:6443 check
                    {% endfor %}

            listen stats
                    bind {{ cluster_ip }}:8181
                    stats enable                    # enable statistics reports  
                    stats hide-version              # Hide the version of HAProxy
                    stats refresh 5s                # HAProxy refresh time
                    stats show-node                 # Shows the hostname of the node
                    stats auth admin:admin          # Enforce Basic authentication for stats page
                    stats uri /stats                # Statistics URL

        state: present

    # TODO: intergrate into role
    - name: Add keepalived.conf for master node
      become: true
      blockinfile:
        path: /etc/keepalived/keepalived.conf
        block: |
          # Global Settings for notifications

          # Define the script used to check if haproxy is still working
          vrrp_script chk_haproxy { 
              script "/usr/bin/killall -0 haproxy"
              interval 2 
              weight 2 
          }

          # Configuration for Virtual Interface
          vrrp_instance LB_VIP {
              interface {{ cluster_interface }}
              state MASTER                          # set to BACKUP on the peer machine
              priority 101                          # set to 99 on the peer machine
              virtual_router_id 51
            
              authentication {
                  auth_type AH
                  auth_pass myP@ssword              # Password for accessing vrrpd. Same on all devices
              }
              unicast_src_ip {{ hostvars[inventory_hostname]['ansible_' + cluster_interface].ipv4.address }}           # Private IP address of master
              unicast_peer {                        # Private IP address of the backup haproxy
              {% for item in groups[inventory_groupname] | difference([inventory_hostname]) %}
              {{ hostvars[item]['ansible_' + cluster_interface].ipv4.address }}
              {% endfor %}
              }
            
              # The virtual ip address shared between the two loadbalancers
              virtual_ipaddress {
                  {{ cluster_ip }}
              }
              
              # Use the Defined Script to Check whether to initiate a fail over
              track_script {
                  chk_haproxy
              }
          }
        state: present
      when: inventory_hostname == groups[inventory_groupname][0]

    # TODO: intergrate into role
    - name: Add keepalived.conf for backup nodes
      become: true
      blockinfile:
        path: /etc/keepalived/keepalived.conf
        block: |
          # Global Settings for notifications

          # Define the script used to check if haproxy is still working
          vrrp_script chk_haproxy { 
              script "/usr/bin/killall -0 haproxy"
              interval 2 
              weight 2 
          }
            
          # Configuration for Virtual Interface
          vrrp_instance LB_VIP {
              interface {{ cluster_interface }}
              state BACKUP                          # set to BACKUP on the peer machine
              priority 100                          # set to 99 on the peer machine
              virtual_router_id 51
            
              authentication {
                  auth_type AH
                  auth_pass myP@ssword              # Password for accessing vrrpd. Same on all devices
              }
              unicast_src_ip {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}           # Private IP address of backup
              unicast_peer {                        # Private IP address of the backup haproxy
              {% for item in groups[inventory_groupname] | difference([inventory_hostname]) %}
              {{ hostvars[item]['ansible_' + cluster_interface].ipv4.address }}
              {% endfor %}
              }
            
              # The virtual ip address shared between the two loadbalancers
              virtual_ipaddress {
                  {{ cluster_ip }}
              }
              
              # Use the Defined Script to Check whether to initiate a fail over
              track_script {
                  chk_haproxy
              }
          } 
        state: present
      when: inventory_hostname != groups[inventory_groupname][0]

    # TODO: intergrate into role
    - name: Enable keepalived
      become: true
      service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - keepalived
        - haproxy